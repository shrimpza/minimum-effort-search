plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'jacoco'
}

sourceCompatibility = '11'
targetCompatibility = '11'

def getVersionName = { String defaultVersion ->
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'describe', '--tags'
			standardOutput = stdout
		}
		return stdout.toString().trim().replaceAll('([0-9]+\\.[0-9]+\\.[0-9]+)-([0-9]+).*', '$1-$2')
	} catch (Exception ignored) {
		return defaultVersion;
	}
}

group = 'net.shrimpworks'
version = getVersionName('0.0.1')

mainClassName = 'net.shrimpworks.mes.Main'

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation 'com.redislabs:jredisearch:1.2.0'
	implementation 'io.undertow:undertow-core:2.0.28.Final'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.1'

	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'org.slf4j:slf4j-simple:1.7.30'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
}

jar {
	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'Main-Class': mainClassName,
		)
	}
}

task execJar(type: Jar) {
	archiveClassifier = "exec"
	archiveFileName = "${archiveBaseName.get()}-${archiveClassifier.get()}.${archiveExtension.get()}"
	from sourceSets.main.output

	dependsOn configurations.runtimeClasspath

	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'Main-Class': mainClassName,
			'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
		)
	}

	// build the fat executable jar file
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
}

publishing {
	repositories {
		maven {
			name = "GitHub"
			url = "https://maven.pkg.github.com/${System.env.GH_USER}/${project.name}"
			authentication {
				basic(BasicAuthentication)
			}
			credentials(PasswordCredentials) {
				username = "${System.env.GH_USER}"
				password = "${System.env.GH_TOKEN}"
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
			artifact execJar
		}
	}
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.enabled = true
	}
}
